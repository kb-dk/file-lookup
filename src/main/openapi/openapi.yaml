openapi: 3.0.2
info:
  version: "${project.version}"
  title: "${project.name}"
  description: |
    ${project.description}
  contact:
    email: "${user.name}@kb.dk"
  license:
    name: "${license.name}"
    url: "${license.url}"
servers:
  - url: "/${project.artifactId}/"
    description: "Current server"
#tags:
#  - name: test
#    description: "Samples for template"
paths:
  /ping:
    get:
      summary: 'Ping the server to check if the server is reachable'
      operationId: ping
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /getEntryFromFilename:
    get:
      summary: 'Get the entry (path, filename and lastSeen) for a given filename'
      operationId: getEntryFromFilename
      parameters:
        - name: filename
          in: query
          description: 'The filename to locate'
          required: true
          schema:
            type: string
            example: 'broad_harvest_2020-12-02T16:00:00Z.warc.gz'
      responses:
        '200':
          description: 'A JSON structure containing the path, filename and lastSeen timestamp for the given filename'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryReply'
        '204':
          description: 'If an entry for the given filename could not be located'
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: 'Internal Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /getEntriesFromFilenames:
    get:
      summary: 'Get the entries (path, filename and lastSeen) for multiple filenames'
      operationId: getEntriesFromFilenames
      parameters:
        - name: filename
          in: query
          description: 'The filenames to locate'
          required: true
          schema:
            type: array
            items:
              type: string
            example: 'broad_harvest_2020-12-02T16:00:00Z.warc.gz'
      responses:
        '200':
          description: 'A list with the path, filename and lastSeen timestamps for the filenames. The list can be empty'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntriesReply'
        '500':
          description: 'Internal Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /getEntries:
    get:
      summary: 'Get the entries (path, filename and lastSeen) based on a given regexp or start time.
                Note that this is potentially a heavy request'
      operationId: getEntries
      parameters:
        - name: entriesRequest
          in: query
          required: true
          schema:
            type: object
            properties:
              regexp:
                description: 'The regexp which will be matched against the full path + filename'
                type: string
                example: '.*/harvest_246/.*2020-12-02.*\\.warc.*'
              since:
                description: 'Only entries newer than this will be returned'
                type: string
                example: '2020-12-04T15:01:13Z'
              sinceEpochMS:
                description: 'Only entries newer than this will be returned'
                type: integer
                format: int64
                example: 1607090473802
            additionalProperties: false
            minProperties: 1

        - name: max
          in: query
          description: 'The maximum number of entries to return, -1 if there is no limit'
          required: false
          schema:
            type: integer
            example: 100
            default: 1000
      responses:
        '200':
          description: 'A list with the path, filename and lastSeen timestamps for the matches, sorted oldest to newest.
                        The list can be empty'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntriesReply'
        '500':
          description: 'Internal Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /status:
    get:
#      tags:
#        - "test"
      summary: 'Get the status for the service'
      operationId: getStatus
      responses:
        '200':
          description: 'A structure containing the status of the service (number of files etc.)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusReply'

  /status/getRoots:
    get:
      summary: 'Get the file paths that are tracked'
      operationId: getRoots
      responses:
        '200':
          description: 'The roots (file paths) that are tracked by the service'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RootsReply'

  /status/fileCount:
    get:
      summary: 'Get the number of files registered'
      operationId: getFilecount
      responses:
        '200':
          description: 'An integer stating the number of registered files'
          content:
            text/plain:
              schema:
                type: integer

  /control/startScan:
    get:
      summary: 'Start a scan of all or some of the roots. If a scan is already running a new one will not be started'
      operationId: startScan
      parameters:
        - name: rootPattern
          in: query
          description: 'A pattern for the roots to scan'
          required: false
          schema:
            type: string
            default: '.*'
            example: '.*/archive_202[0-9]/.*'
      responses:
        # TODO: Explicitly state if a non-starter was due to a scan already running or if no roots matched.
        '200':
          description: 'A list of the roots for the started scan or the empty list if the pattern did not match any roots or a scan was already running'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RootsReply'
        '500':
          description: 'Internal Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:

    StatusReply:
      type: object
      required:
        - general
      properties:
        general:
          type: string
          description: 'Human readable status'
        roots:
          type: array
          items:
            type: string
          description: 'List of tracked roots (file paths)'
        files:
          type: integer
          description: 'The number of files known by the service'
        state:
          type: string
          enum: [idle, scanning]
          description: 'Whether the service is actively scanning for changes or if it is idle'
        currentScanFolder:
          type: string
          description: 'If the service is actively scanning, whis is the folder being scanned'

    RootsReply:
      type: object
      required:
        - roots
      properties:
        roots:
          type: array
          items:
            type: string
          description: 'List of tracked roots (file paths)'

    EntryReply:
      type: object
      required:
        - path
        - lastSeen
      properties:
        path:
          type: string
          description: 'The path for the file'
        filename:
          type: string
          description: 'The filename for the file. This will not be present if there is only a path'
        lastSeen:
          type: string
          description: 'When the entry was last seen, in the subset YYYY-MM-DDThh:mm:ssZ of ISO-8601'
          example: '2020-12-04T15:01:13Z'
        lastSeenEpochMS:
          type: integer
          format: int64
          description: 'When the entry was last seen, in milliseconds since epoch'
          example: 1607090473802

    EntriesReply:
      type: array
      items:
        $ref: '#/components/schemas/EntryReply'

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
